# FRONTEND INTEGRATION GUIDE

## AUTHENTICATION

### JWT Authentication
- Token required in Authorization header for all protected routes
- Format: "Bearer {token}"
- Token obtained after Spotify OAuth flow

### Spotify Authentication
- GET /spotify/login - Initiate Spotify OAuth flow
- GET /spotify/callback - Spotify OAuth callback
  - Output: { token: "jwt-token", user: { ... } }

## REST API ENDPOINTS

### Profile
- GET /profile/me
  - Input: Authorization header with token
  - Output: User profile data
   
- POST /username
  - Input: { username: string }
  - Output: { success: true, message: "Username updated" }

### Friends System
1. GET /friends
   - Input: None
   - Output: List of friends
   
2. POST /request
   - Input: { userId: string }
   - Output: { success: true }
   
3. GET /requests
   - Input: None
   - Output: { incoming: [...], outgoing: [...] }
   
4. PUT /request/:requestId/accept
   - Input: requestId as URL parameter
   - Output: { success: true }
   
5. PUT /request/:requestId/reject
   - Input: requestId as URL parameter
   - Output: { success: true }
   
6. DELETE /:friendId
   - Input: friendId as URL parameter
   - Output: { success: true }

### User Search
- GET /search
  - Input: query parameter ?q=text
  - Output: List of matching users

### Onboarding
- GET /onboarding
  - Input: None
  - Output: { hasCompletedOnboarding: boolean }

## DATA MODELS

### User
- _id: string
- spotifyId: string
- username?: string
- displayName: string
- firstName: string
- lastName?: string
- profilePicture?: string
- bio?: string
- age?: number
- gender?: string
- intrestedIn?: string[]
- location?: { city?: string, country?: string }
- isOnline: boolean
- lastSeen?: Date
- isActive: boolean
- friends: string[]
- friendRequests: { incoming: string[], outgoing: string[] }

### FriendRequest
- _id: string
- senderId: string
- receiverId: string
- status: 'pending' | 'accepted' | 'rejected'
- createdAt: Date

## ERROR HANDLING
- All endpoints return standard error format:
  { success: false, message: "Error message", error?: details }
- HTTP status codes follow standard conventions (200, 400, 401, 403, 404, 500) 